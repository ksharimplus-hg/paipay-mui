{"version":3,"names":["width","height","Dimensions","get","initialMetrics","Platform","OS","initialWindowMetrics","frame","x","y","insets","top","left","right","bottom","SafeAreaProviderCompat","children","style","styles","container","StyleSheet","create","flex"],"sources":["SafeAreaProviderCompat.tsx"],"sourcesContent":["/**\n * Ported from @react-navigation https://github.com/react-navigation/react-navigation/blob/main/packages/elements/src/SafeAreaProviderCompat.tsx\n */\nimport * as React from 'react';\nimport {\n\tDimensions,\n\tPlatform,\n\tStyleProp,\n\tStyleSheet,\n\tView,\n\tViewStyle,\n} from 'react-native';\n\nimport {\n\tinitialWindowMetrics,\n\tSafeAreaInsetsContext,\n\tSafeAreaProvider,\n} from 'react-native-safe-area-context';\n\ntype Props = {\n\tchildren: React.ReactNode;\n\tstyle?: StyleProp<ViewStyle>;\n};\n\nconst { width = 0, height = 0 } = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics =\n\tPlatform.OS === 'web' || initialWindowMetrics == null\n\t\t? {\n\t\t\t\tframe: { x: 0, y: 0, width, height },\n\t\t\t\tinsets: { top: 0, left: 0, right: 0, bottom: 0 },\n\t\t  }\n\t\t: initialWindowMetrics;\n\nexport default function SafeAreaProviderCompat({ children, style }: Props) {\n\treturn (\n\t\t<SafeAreaInsetsContext.Consumer>\n\t\t\t{(insets) => {\n\t\t\t\tif (insets) {\n\t\t\t\t\t// If we already have insets, don't wrap the stack in another safe area provider\n\t\t\t\t\t// This avoids an issue with updates at the cost of potentially incorrect values\n\t\t\t\t\t// https://github.com/react-navigation/react-navigation/issues/174\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<View style={[styles.container, style]}>\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</View>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn (\n\t\t\t\t\t<SafeAreaProvider\n\t\t\t\t\t\tinitialMetrics={initialMetrics}\n\t\t\t\t\t\tstyle={style}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</SafeAreaProvider>\n\t\t\t\t);\n\t\t\t}}\n\t\t</SafeAreaInsetsContext.Consumer>\n\t);\n}\n\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t},\n});\n"],"mappings":";;;;;;AAGA;AACA;AASA;AAIwC;AAAA;AAjBxC;AACA;AACA;;AAsBA,MAAM;EAAEA,KAAK,GAAG,CAAC;EAAEC,MAAM,GAAG;AAAE,CAAC,GAAGC,uBAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;;AAE1D;AACA;AACA;AACA,MAAMC,cAAc,GACnBC,qBAAQ,CAACC,EAAE,KAAK,KAAK,IAAIC,gDAAoB,IAAI,IAAI,GAClD;EACAC,KAAK,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE,CAAC;IAAEV,KAAK;IAAEC;EAAO,CAAC;EACpCU,MAAM,EAAE;IAAEC,GAAG,EAAE,CAAC;IAAEC,IAAI,EAAE,CAAC;IAAEC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE;AAC/C,CAAC,GACDR,gDAAoB;AAET,SAASS,sBAAsB,OAA6B;EAAA,IAA5B;IAAEC,QAAQ;IAAEC;EAAa,CAAC;EACxE,oBACC,oBAAC,iDAAqB,CAAC,QAAQ,QAC5BP,MAAM,IAAK;IACZ,IAAIA,MAAM,EAAE;MACX;MACA;MACA;MACA,oBACC,oBAAC,iBAAI;QAAC,KAAK,EAAE,CAACQ,MAAM,CAACC,SAAS,EAAEF,KAAK;MAAE,GACrCD,QAAQ,CACH;IAET;IAEA,oBACC,oBAAC,4CAAgB;MAChB,cAAc,EAAEb,cAAe;MAC/B,KAAK,EAAEc;IAAM,GAEZD,QAAQ,CACS;EAErB,CAAC,CAC+B;AAEnC;AAEAD,sBAAsB,CAACZ,cAAc,GAAGA,cAAc;AAEtD,MAAMe,MAAM,GAAGE,uBAAU,CAACC,MAAM,CAAC;EAChCF,SAAS,EAAE;IACVG,IAAI,EAAE;EACP;AACD,CAAC,CAAC"}