{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["import type {\r\n\tTextInput as NativeTextInput,\r\n\tAnimated,\r\n\tTextStyle,\r\n\tLayoutChangeEvent,\r\n\tColorValue,\r\n\tStyleProp,\r\n\tViewProps,\r\n} from 'react-native';\r\n\r\nimport type { $Omit } from './../../types';\r\nimport type { Props as TextInputProps } from './TextInput';\r\n\r\nexport type TextInputLabelProp = string | React.ReactElement;\r\n\r\nexport type RenderProps = {\r\n\tref: (a?: NativeTextInput | null) => void;\r\n\tonChangeText?: (a: string) => void;\r\n\tplaceholder?: string;\r\n\tplaceholderTextColor?: ColorValue;\r\n\teditable?: boolean;\r\n\tselectionColor?: string;\r\n\tonFocus?: (args: any) => void;\r\n\tonBlur?: (args: any) => void;\r\n\tunderlineColorAndroid?: string;\r\n\tstyle: any;\r\n\tmultiline?: boolean;\r\n\tnumberOfLines?: number;\r\n\tvalue?: string;\r\n\tadjustsFontSizeToFit?: boolean;\r\n\ttestID?: string;\r\n};\r\ntype TextInputTypesWithoutMode = $Omit<TextInputProps, 'mode'>;\r\nexport type State = {\r\n\tlabeled: Animated.Value;\r\n\terror: Animated.Value;\r\n\tfocused: boolean;\r\n\tplaceholder?: string;\r\n\tvalue?: string;\r\n\tlabelLayout: { measured: boolean; width: number; height: number };\r\n\tleftLayout: { height: number | null; width: number | null };\r\n\trightLayout: { height: number | null; width: number | null };\r\n\tcontentStyle?: StyleProp<ViewProps>;\r\n};\r\nexport type ChildTextInputProps = {\r\n\tparentState: State;\r\n\tinnerRef: (ref?: NativeTextInput | null) => void;\r\n\tonFocus?: (args: any) => void;\r\n\tonBlur?: (args: any) => void;\r\n\tforceFocus: () => void;\r\n\tonChangeText?: (value: string) => void;\r\n\tonLayoutAnimatedText: (args: any) => void;\r\n\tonLeftAffixLayoutChange: (event: LayoutChangeEvent) => void;\r\n\tonRightAffixLayoutChange: (event: LayoutChangeEvent) => void;\r\n} & TextInputTypesWithoutMode;\r\nexport type LabelProps = {\r\n\tmode?: 'flat' | 'outlined';\r\n\tplaceholderStyle: any;\r\n\tplaceholderOpacity: any;\r\n\tbaseLabelTranslateX: number;\r\n\tbaseLabelTranslateY: number;\r\n\twiggleOffsetX: number;\r\n\tlabelScale: number;\r\n\tfontSize: number;\r\n\tlineHeight?: number | undefined;\r\n\tfontWeight: TextStyle['fontWeight'];\r\n\tfont: any;\r\n\ttopPosition: number;\r\n\tpaddingOffset?: { paddingLeft: number; paddingRight: number } | null;\r\n\tlabelTranslationXOffset?: number;\r\n\tplaceholderColor: string | null;\r\n\tbackgroundColor?: ColorValue;\r\n\tlabel?: TextInputLabelProp | null;\r\n\thasActiveOutline?: boolean | null;\r\n\tactiveColor: string;\r\n\terrorColor?: string;\r\n\terror?: boolean | null;\r\n\tonLayoutAnimatedText: (args: any) => void;\r\n\troundness: number;\r\n\tmaxFontSizeMultiplier?: number | undefined | null;\r\n\ttestID?: string;\r\n\tcontentStyle?: StyleProp<ViewProps>;\r\n};\r\nexport type InputLabelProps = {\r\n\tparentState: State;\r\n\tlabelProps: LabelProps;\r\n\tlabelBackground?: any;\r\n\tmaxFontSizeMultiplier?: number | undefined | null;\r\n};\r\n\r\nexport type LabelBackgroundProps = {\r\n\tlabelProps: LabelProps;\r\n\tlabelStyle: any;\r\n\tparentState: State;\r\n\tmaxFontSizeMultiplier?: number | undefined | null;\r\n};\r\n"],"mappings":""}