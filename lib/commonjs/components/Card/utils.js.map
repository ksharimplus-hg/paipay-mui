{"version":3,"names":["getCardCoverStyle","theme","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","colors","outline","dark","color","white","alpha","rgb","string","black","getBackgroundColor","isMode","surfaceVariant","surface","getCardColors","mode","modeToCompare","backgroundColor","borderColor"],"sources":["utils.tsx"],"sourcesContent":["import color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n\ttheme,\n\tindex,\n\ttotal,\n}: {\n\ttheme: InternalTheme;\n\tindex?: number;\n\ttotal?: number;\n}) => {\n\tconst { isV3, roundness } = theme;\n\n\tif (isV3) {\n\t\treturn {\n\t\t\tborderRadius: 3 * roundness,\n\t\t};\n\t}\n\n\tif (index === 0) {\n\t\tif (total === 1) {\n\t\t\treturn {\n\t\t\t\tborderRadius: roundness,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tborderTopLeftRadius: roundness,\n\t\t\tborderTopRightRadius: roundness,\n\t\t};\n\t}\n\n\tif (typeof total === 'number' && index === total - 1) {\n\t\treturn {\n\t\t\tborderBottomLeftRadius: roundness,\n\t\t};\n\t}\n\n\treturn undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: InternalTheme }) => {\n\tif (theme.isV3) {\n\t\treturn theme.colors.outline;\n\t}\n\n\tif (theme.dark) {\n\t\treturn color(white).alpha(0.12).rgb().string();\n\t}\n\treturn color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n\ttheme,\n\tisMode,\n}: {\n\ttheme: InternalTheme;\n\tisMode: (mode: CardMode) => boolean;\n}) => {\n\tif (theme.isV3) {\n\t\tif (isMode('contained')) {\n\t\t\treturn theme.colors.surfaceVariant;\n\t\t}\n\t\tif (isMode('outlined')) {\n\t\t\treturn theme.colors.surface;\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const getCardColors = ({\n\ttheme,\n\tmode,\n}: {\n\ttheme: InternalTheme;\n\tmode: CardMode;\n}) => {\n\tconst isMode = (modeToCompare: CardMode) => {\n\t\treturn mode === modeToCompare;\n\t};\n\n\treturn {\n\t\tbackgroundColor: getBackgroundColor({\n\t\t\ttheme,\n\t\t\tisMode,\n\t\t}),\n\t\tborderColor: getBorderColor({ theme }),\n\t};\n};\n"],"mappings":";;;;;;AAAA;AAEA;AAA6D;AAKtD,MAAMA,iBAAiB,GAAG,QAQ3B;EAAA,IAR4B;IACjCC,KAAK;IACLC,KAAK;IACLC;EAKD,CAAC;EACA,MAAM;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGJ,KAAK;EAEjC,IAAIG,IAAI,EAAE;IACT,OAAO;MACNE,YAAY,EAAE,CAAC,GAAGD;IACnB,CAAC;EACF;EAEA,IAAIH,KAAK,KAAK,CAAC,EAAE;IAChB,IAAIC,KAAK,KAAK,CAAC,EAAE;MAChB,OAAO;QACNG,YAAY,EAAED;MACf,CAAC;IACF;IAEA,OAAO;MACNE,mBAAmB,EAAEF,SAAS;MAC9BG,oBAAoB,EAAEH;IACvB,CAAC;EACF;EAEA,IAAI,OAAOF,KAAK,KAAK,QAAQ,IAAID,KAAK,KAAKC,KAAK,GAAG,CAAC,EAAE;IACrD,OAAO;MACNM,sBAAsB,EAAEJ;IACzB,CAAC;EACF;EAEA,OAAOK,SAAS;AACjB,CAAC;AAAC;AAEF,MAAMC,cAAc,GAAG,SAAyC;EAAA,IAAxC;IAAEV;EAAgC,CAAC;EAC1D,IAAIA,KAAK,CAACG,IAAI,EAAE;IACf,OAAOH,KAAK,CAACW,MAAM,CAACC,OAAO;EAC5B;EAEA,IAAIZ,KAAK,CAACa,IAAI,EAAE;IACf,OAAO,IAAAC,cAAK,EAACC,aAAK,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;EAC/C;EACA,OAAO,IAAAJ,cAAK,EAACK,aAAK,CAAC,CAACH,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;AAC/C,CAAC;AAED,MAAME,kBAAkB,GAAG,SAMrB;EAAA,IANsB;IAC3BpB,KAAK;IACLqB;EAID,CAAC;EACA,IAAIrB,KAAK,CAACG,IAAI,EAAE;IACf,IAAIkB,MAAM,CAAC,WAAW,CAAC,EAAE;MACxB,OAAOrB,KAAK,CAACW,MAAM,CAACW,cAAc;IACnC;IACA,IAAID,MAAM,CAAC,UAAU,CAAC,EAAE;MACvB,OAAOrB,KAAK,CAACW,MAAM,CAACY,OAAO;IAC5B;EACD;EACA,OAAOd,SAAS;AACjB,CAAC;AAEM,MAAMe,aAAa,GAAG,SAMvB;EAAA,IANwB;IAC7BxB,KAAK;IACLyB;EAID,CAAC;EACA,MAAMJ,MAAM,GAAIK,aAAuB,IAAK;IAC3C,OAAOD,IAAI,KAAKC,aAAa;EAC9B,CAAC;EAED,OAAO;IACNC,eAAe,EAAEP,kBAAkB,CAAC;MACnCpB,KAAK;MACLqB;IACD,CAAC,CAAC;IACFO,WAAW,EAAElB,cAAc,CAAC;MAAEV;IAAM,CAAC;EACtC,CAAC;AACF,CAAC;AAAC"}