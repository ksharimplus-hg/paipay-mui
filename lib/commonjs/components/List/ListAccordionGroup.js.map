{"version":3,"names":["ListAccordionGroupContext","React","createContext","ListAccordionGroup","expandedId","expandedIdProp","onAccordionPress","children","setExpandedId","useState","undefined","onAccordionPressDefault","newExpandedId","currentExpandedId","displayName"],"sources":["ListAccordionGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport type Props = {\n\t/**\n\t * Function to execute on selection change.\n\t */\n\tonAccordionPress?: (expandedId: string | number) => void;\n\t/**\n\t * Id of the currently expanded list accordion\n\t */\n\texpandedId?: string | number;\n\t/**\n\t * React elements containing list accordions\n\t */\n\tchildren: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n\texpandedId: string | number | undefined;\n\tonAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext =\n\tReact.createContext<ListAccordionGroupContextType>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n\texpandedId: expandedIdProp,\n\tonAccordionPress,\n\tchildren,\n}: Props) => {\n\tconst [expandedId, setExpandedId] = React.useState<\n\t\tstring | number | undefined\n\t>(undefined);\n\n\tconst onAccordionPressDefault = (newExpandedId: string | number) => {\n\t\tsetExpandedId((currentExpandedId) =>\n\t\t\tcurrentExpandedId === newExpandedId ? undefined : newExpandedId\n\t\t);\n\t};\n\n\treturn (\n\t\t<ListAccordionGroupContext.Provider\n\t\t\tvalue={{\n\t\t\t\texpandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n\t\t\t\tonAccordionPress: onAccordionPress || onAccordionPressDefault,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</ListAccordionGroupContext.Provider>\n\t);\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n"],"mappings":";;;;;;AAAA;AAA+B;AAAA;AAsBxB,MAAMA,yBAAyB,gBACrCC,KAAK,CAACC,aAAa,CAAgC,IAAI,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAqCA,MAAMC,kBAAkB,GAAG,QAId;EAAA,IAJe;IAC3BC,UAAU,EAAEC,cAAc;IAC1BC,gBAAgB;IAChBC;EACM,CAAC;EACP,MAAM,CAACH,UAAU,EAAEI,aAAa,CAAC,GAAGP,KAAK,CAACQ,QAAQ,CAEhDC,SAAS,CAAC;EAEZ,MAAMC,uBAAuB,GAAIC,aAA8B,IAAK;IACnEJ,aAAa,CAAEK,iBAAiB,IAC/BA,iBAAiB,KAAKD,aAAa,GAAGF,SAAS,GAAGE,aAAa,CAC/D;EACF,CAAC;EAED,oBACC,oBAAC,yBAAyB,CAAC,QAAQ;IAClC,KAAK,EAAE;MACNR,UAAU,EAAEC,cAAc,IAAID,UAAU;MAAE;MAC1CE,gBAAgB,EAAEA,gBAAgB,IAAIK;IACvC;EAAE,GAEDJ,QAAQ,CAC2B;AAEvC,CAAC;AAEDJ,kBAAkB,CAACW,WAAW,GAAG,qBAAqB;AAAC,eAExCX,kBAAkB;AAAA"}