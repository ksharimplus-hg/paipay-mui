{"version":3,"names":["Checkbox","props","Platform","OS","withInternalTheme","CheckboxWithTheme"],"sources":["Checkbox.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { GestureResponderEvent, Platform } from 'react-native';\r\n\r\nimport CheckboxAndroid from './CheckboxAndroid';\r\nimport CheckboxIOS from './CheckboxIOS';\r\nimport { withInternalTheme } from '../../core/theming';\r\nimport type { InternalTheme } from '../../types';\r\n\r\nexport type Props = {\r\n\t/**\r\n\t * Status of checkbox.\r\n\t */\r\n\tstatus: 'checked' | 'unchecked' | 'indeterminate';\r\n\t/**\r\n\t * Whether checkbox is disabled.\r\n\t */\r\n\tdisabled?: boolean;\r\n\t/**\r\n\t * Function to execute on press.\r\n\t */\r\n\tonPress?: (e: GestureResponderEvent) => void;\r\n\t/**\r\n\t * Custom color for unchecked checkbox.\r\n\t */\r\n\tuncheckedColor?: string;\r\n\t/**\r\n\t * Custom color for checkbox.\r\n\t */\r\n\tcolor?: string;\r\n\t/**\r\n\t * @optional\r\n\t */\r\n\ttheme: InternalTheme;\r\n\t/**\r\n\t * testID to be used on tests.\r\n\t */\r\n\ttestID?: string;\r\n};\r\n\r\n/**\r\n * Checkboxes allow the selection of multiple options from a set.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\r\n *     <figcaption>Android (enabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\r\n *     <figcaption>Android (disabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\r\n *     <figcaption>iOS (enabled)</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\r\n *     <figcaption>iOS (disabled)</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { Checkbox } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => {\r\n *   const [checked, setChecked] = React.useState(false);\r\n *\r\n *   return (\r\n *     <Checkbox\r\n *       status={checked ? 'checked' : 'unchecked'}\r\n *       onPress={() => {\r\n *         setChecked(!checked);\r\n *       }}\r\n *     />\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst Checkbox = (props: Props) =>\r\n\tPlatform.OS === 'ios' ? (\r\n\t\t<CheckboxIOS {...props} />\r\n\t) : (\r\n\t\t<CheckboxAndroid {...props} />\r\n\t);\r\n\r\nexport default withInternalTheme(Checkbox);\r\n\r\n// @component-docs ignore-next-line\r\nconst CheckboxWithTheme = withInternalTheme(Checkbox);\r\n// @component-docs ignore-next-line\r\nexport { CheckboxWithTheme as Checkbox };\r\n"],"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AACA;AAAuD;AAAA;AAAA;AAkCvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAIC,KAAY,IAC7BC,qBAAQ,CAACC,EAAE,KAAK,KAAK,gBACpB,oBAAC,oBAAW,EAAKF,KAAK,CAAI,gBAE1B,oBAAC,wBAAe,EAAKA,KAAK,CAC1B;AAAC,eAEY,IAAAG,0BAAiB,EAACJ,QAAQ,CAAC,EAE1C;AAAA;AACA,MAAMK,iBAAiB,GAAG,IAAAD,0BAAiB,EAACJ,QAAQ,CAAC;AACrD;AAAA"}