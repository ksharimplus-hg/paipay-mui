{"version":3,"names":["CheckboxItem","style","status","label","onPress","labelStyle","theme","testID","mode","position","accessibilityLabel","disabled","labelVariant","props","checkboxProps","isLeading","checkbox","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","color","checked","styles","container","font","displayName","withInternalTheme","CheckboxItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n\tGestureResponderEvent,\n\tStyleProp,\n\tStyleSheet,\n\tTextStyle,\n\tView,\n\tViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n\t/**\n\t * Status of checkbox.\n\t */\n\tstatus: 'checked' | 'unchecked' | 'indeterminate';\n\t/**\n\t * Whether checkbox is disabled.\n\t */\n\tdisabled?: boolean;\n\t/**\n\t * Label to be displayed on the item.\n\t */\n\tlabel: string;\n\t/**\n\t * Function to execute on press.\n\t */\n\tonPress?: (e: GestureResponderEvent) => void;\n\t/**\n\t * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n\t */\n\taccessibilityLabel?: string;\n\t/**\n\t * Custom color for unchecked checkbox.\n\t */\n\tuncheckedColor?: string;\n\t/**\n\t * Custom color for checkbox.\n\t */\n\tcolor?: string;\n\t/**\n\t * Additional styles for container View.\n\t */\n\tstyle?: StyleProp<ViewStyle>;\n\t/**\n\t * Style that is passed to Label element.\n\t */\n\tlabelStyle?: StyleProp<TextStyle>;\n\t/**\n\t * @supported Available in v5.x with theme version 3\n\t *\n\t * Label text variant defines appropriate text styles for type role and its size.\n\t * Available variants:\n\t *\n\t *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n\t *\n\t *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n\t *\n\t *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n\t *\n\t *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n\t *\n\t *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n\t */\n\tlabelVariant?: keyof typeof MD3TypescaleKey;\n\t/**\n\t * @optional\n\t */\n\ttheme: InternalTheme;\n\t/**\n\t * testID to be used on tests.\n\t */\n\ttestID?: string;\n\t/**\n\t * Checkbox control position.\n\t */\n\tposition?: 'leading' | 'trailing';\n\t/**\n\t * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n\t * Left undefined `<Checkbox />` will be used.\n\t */\n\tmode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n\tstyle,\n\tstatus,\n\tlabel,\n\tonPress,\n\tlabelStyle,\n\ttheme,\n\ttestID,\n\tmode,\n\tposition = 'trailing',\n\taccessibilityLabel = label,\n\tdisabled,\n\tlabelVariant = 'bodyLarge',\n\t...props\n}: Props) => {\n\tconst checkboxProps = { ...props, status, theme, disabled };\n\tconst isLeading = position === 'leading';\n\tlet checkbox;\n\n\tif (mode === 'android') {\n\t\tcheckbox = <CheckboxAndroid {...checkboxProps} />;\n\t} else if (mode === 'ios') {\n\t\tcheckbox = <CheckboxIOS {...checkboxProps} />;\n\t} else {\n\t\tcheckbox = <Checkbox {...checkboxProps} />;\n\t}\n\n\tconst textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n\tconst disabledTextColor = theme.isV3\n\t\t? theme.colors.onSurfaceDisabled\n\t\t: theme.colors.disabled;\n\tconst textAlign = isLeading ? 'right' : 'left';\n\n\tconst computedStyle = {\n\t\tcolor: disabled ? disabledTextColor : textColor,\n\t\ttextAlign,\n\t} as TextStyle;\n\n\treturn (\n\t\t<TouchableRipple\n\t\t\taccessibilityLabel={accessibilityLabel}\n\t\t\taccessibilityRole=\"checkbox\"\n\t\t\taccessibilityState={{\n\t\t\t\tchecked: status === 'checked',\n\t\t\t\tdisabled,\n\t\t\t}}\n\t\t\tonPress={onPress}\n\t\t\ttestID={testID}\n\t\t\tdisabled={disabled}\n\t\t>\n\t\t\t<View\n\t\t\t\tstyle={[styles.container, style]}\n\t\t\t\tpointerEvents=\"none\"\n\t\t\t\timportantForAccessibility=\"no-hide-descendants\"\n\t\t\t>\n\t\t\t\t{isLeading && checkbox}\n\t\t\t\t<Text\n\t\t\t\t\tvariant={labelVariant}\n\t\t\t\t\tstyle={[\n\t\t\t\t\t\tstyles.label,\n\t\t\t\t\t\t!theme.isV3 && styles.font,\n\t\t\t\t\t\tcomputedStyle,\n\t\t\t\t\t\tlabelStyle,\n\t\t\t\t\t]}\n\t\t\t\t>\n\t\t\t\t\t{label}\n\t\t\t\t</Text>\n\t\t\t\t{!isLeading && checkbox}\n\t\t\t</View>\n\t\t</TouchableRipple>\n\t);\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withInternalTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withInternalTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'space-between',\n\t\tpaddingVertical: 8,\n\t\tpaddingHorizontal: 16,\n\t},\n\tlabel: {\n\t\tflexShrink: 1,\n\t\tflexGrow: 1,\n\t},\n\tfont: {\n\t\tfontSize: 16,\n\t},\n});\n"],"mappings":"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"}