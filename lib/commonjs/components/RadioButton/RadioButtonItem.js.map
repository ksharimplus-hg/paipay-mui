{"version":3,"names":["RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","accessibilityLabel","testID","mode","position","labelVariant","radioButtonProps","isLeading","radioButton","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","context","checked","isChecked","contextValue","event","handlePress","onValueChange","styles","container","font","displayName","withInternalTheme","RadioButtonItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["RadioButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n\tGestureResponderEvent,\r\n\tStyleProp,\r\n\tStyleSheet,\r\n\tTextStyle,\r\n\tView,\r\n\tViewStyle,\r\n} from 'react-native';\r\n\r\nimport RadioButton from './RadioButton';\r\nimport RadioButtonAndroid from './RadioButtonAndroid';\r\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\r\nimport RadioButtonIOS from './RadioButtonIOS';\r\nimport { handlePress, isChecked } from './utils';\r\nimport { withInternalTheme } from '../../core/theming';\r\nimport type { InternalTheme, MD3TypescaleKey } from '../../types';\r\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\r\nimport Text from '../Typography/Text';\r\n\r\nexport type Props = {\r\n\t/**\r\n\t * Value of the radio button.\r\n\t */\r\n\tvalue: string;\r\n\t/**\r\n\t * Label to be displayed on the item.\r\n\t */\r\n\tlabel: string;\r\n\t/**\r\n\t * Whether radio is disabled.\r\n\t */\r\n\tdisabled?: boolean;\r\n\t/**\r\n\t * Function to execute on press.\r\n\t */\r\n\tonPress?: (e: GestureResponderEvent) => void;\r\n\t/**\r\n\t * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\r\n\t */\r\n\taccessibilityLabel?: string;\r\n\t/**\r\n\t * Custom color for unchecked radio.\r\n\t */\r\n\tuncheckedColor?: string;\r\n\t/**\r\n\t * Custom color for radio.\r\n\t */\r\n\tcolor?: string;\r\n\t/**\r\n\t * Status of radio button.\r\n\t */\r\n\tstatus?: 'checked' | 'unchecked';\r\n\t/**\r\n\t * Additional styles for container View.\r\n\t */\r\n\tstyle?: StyleProp<ViewStyle>;\r\n\t/**\r\n\t * Style that is passed to Label element.\r\n\t */\r\n\tlabelStyle?: StyleProp<TextStyle>;\r\n\t/**\r\n\t * @supported Available in v5.x with theme version 3\r\n\t *\r\n\t * Label text variant defines appropriate text styles for type role and its size.\r\n\t * Available variants:\r\n\t *\r\n\t *  Display: `displayLarge`, `displayMedium`, `displaySmall`\r\n\t *\r\n\t *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\r\n\t *\r\n\t *  Title: `titleLarge`, `titleMedium`, `titleSmall`\r\n\t *\r\n\t *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\r\n\t *\r\n\t *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\r\n\t */\r\n\tlabelVariant?: keyof typeof MD3TypescaleKey;\r\n\t/**\r\n\t * @optional\r\n\t */\r\n\ttheme: InternalTheme;\r\n\t/**\r\n\t * testID to be used on tests.\r\n\t */\r\n\ttestID?: string;\r\n\t/**\r\n\t * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\r\n\t * Left undefined `<RadioButton />` will be used.\r\n\t */\r\n\tmode?: 'android' | 'ios';\r\n\t/**\r\n\t * Radio button control position.\r\n\t */\r\n\tposition?: 'leading' | 'trailing';\r\n};\r\n\r\n/**\r\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\r\n *     <figcaption>Pressed</figcaption>\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { RadioButton } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => {\r\n *   const [value, setValue] = React.useState('first');\r\n *\r\n *   return (\r\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\r\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\r\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\r\n *     </RadioButton.Group>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n *```\r\n */\r\nconst RadioButtonItem = ({\r\n\tvalue,\r\n\tlabel,\r\n\tstyle,\r\n\tlabelStyle,\r\n\tonPress,\r\n\tdisabled,\r\n\tcolor,\r\n\tuncheckedColor,\r\n\tstatus,\r\n\ttheme,\r\n\taccessibilityLabel = label,\r\n\ttestID,\r\n\tmode,\r\n\tposition = 'trailing',\r\n\tlabelVariant = 'bodyLarge',\r\n}: Props) => {\r\n\tconst radioButtonProps = { value, disabled, status, color, uncheckedColor };\r\n\tconst isLeading = position === 'leading';\r\n\tlet radioButton: any;\r\n\r\n\tif (mode === 'android') {\r\n\t\tradioButton = <RadioButtonAndroid {...radioButtonProps} />;\r\n\t} else if (mode === 'ios') {\r\n\t\tradioButton = <RadioButtonIOS {...radioButtonProps} />;\r\n\t} else {\r\n\t\tradioButton = <RadioButton {...radioButtonProps} />;\r\n\t}\r\n\r\n\tconst textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\r\n\tconst disabledTextColor = theme.isV3\r\n\t\t? theme.colors.onSurfaceDisabled\r\n\t\t: theme.colors.disabled;\r\n\tconst textAlign = isLeading ? 'right' : 'left';\r\n\r\n\tconst computedStyle = {\r\n\t\tcolor: disabled ? disabledTextColor : textColor,\r\n\t\ttextAlign,\r\n\t} as TextStyle;\r\n\r\n\treturn (\r\n\t\t<RadioButtonContext.Consumer>\r\n\t\t\t{(context?: RadioButtonContextType) => {\r\n\t\t\t\tconst checked =\r\n\t\t\t\t\tisChecked({\r\n\t\t\t\t\t\tcontextValue: context?.value,\r\n\t\t\t\t\t\tstatus,\r\n\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t}) === 'checked';\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<TouchableRipple\r\n\t\t\t\t\t\tonPress={(event) =>\r\n\t\t\t\t\t\t\thandlePress({\r\n\t\t\t\t\t\t\t\tonPress: onPress,\r\n\t\t\t\t\t\t\t\tonValueChange: context?.onValueChange,\r\n\t\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\t\tevent,\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\taccessibilityLabel={accessibilityLabel}\r\n\t\t\t\t\t\taccessibilityRole=\"radio\"\r\n\t\t\t\t\t\taccessibilityState={{\r\n\t\t\t\t\t\t\tchecked,\r\n\t\t\t\t\t\t\tdisabled,\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\ttestID={testID}\r\n\t\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<View\r\n\t\t\t\t\t\t\tstyle={[styles.container, style]}\r\n\t\t\t\t\t\t\tpointerEvents=\"none\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{isLeading && radioButton}\r\n\t\t\t\t\t\t\t<Text\r\n\t\t\t\t\t\t\t\tvariant={labelVariant}\r\n\t\t\t\t\t\t\t\tstyle={[\r\n\t\t\t\t\t\t\t\t\tstyles.label,\r\n\t\t\t\t\t\t\t\t\t!theme.isV3 && styles.font,\r\n\t\t\t\t\t\t\t\t\tcomputedStyle,\r\n\t\t\t\t\t\t\t\t\tlabelStyle,\r\n\t\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{label}\r\n\t\t\t\t\t\t\t</Text>\r\n\t\t\t\t\t\t\t{!isLeading && radioButton}\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t</TouchableRipple>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\t\t</RadioButtonContext.Consumer>\r\n\t);\r\n};\r\n\r\nRadioButtonItem.displayName = 'RadioButton.Item';\r\n\r\nexport default withInternalTheme(RadioButtonItem);\r\n\r\n// @component-docs ignore-next-line\r\nconst RadioButtonItemWithTheme = withInternalTheme(RadioButtonItem);\r\n// @component-docs ignore-next-line\r\nexport { RadioButtonItemWithTheme as RadioButtonItem };\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflexDirection: 'row',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'space-between',\r\n\t\tpaddingVertical: 8,\r\n\t\tpaddingHorizontal: 16,\r\n\t},\r\n\tlabel: {\r\n\t\tflexShrink: 1,\r\n\t\tflexGrow: 1,\r\n\t},\r\n\tfont: {\r\n\t\tfontSize: 16,\r\n\t},\r\n});\r\n"],"mappings":";;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAsC;AAAA;AAAA;AA+EtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,QAgBX;EAAA,IAhBY;IACxBC,KAAK;IACLC,KAAK;IACLC,KAAK;IACLC,UAAU;IACVC,OAAO;IACPC,QAAQ;IACRC,KAAK;IACLC,cAAc;IACdC,MAAM;IACNC,KAAK;IACLC,kBAAkB,GAAGT,KAAK;IAC1BU,MAAM;IACNC,IAAI;IACJC,QAAQ,GAAG,UAAU;IACrBC,YAAY,GAAG;EACT,CAAC;EACP,MAAMC,gBAAgB,GAAG;IAAEf,KAAK;IAAEK,QAAQ;IAAEG,MAAM;IAAEF,KAAK;IAAEC;EAAe,CAAC;EAC3E,MAAMS,SAAS,GAAGH,QAAQ,KAAK,SAAS;EACxC,IAAII,WAAgB;EAEpB,IAAIL,IAAI,KAAK,SAAS,EAAE;IACvBK,WAAW,gBAAG,oBAAC,2BAAkB,EAAKF,gBAAgB,CAAI;EAC3D,CAAC,MAAM,IAAIH,IAAI,KAAK,KAAK,EAAE;IAC1BK,WAAW,gBAAG,oBAAC,uBAAc,EAAKF,gBAAgB,CAAI;EACvD,CAAC,MAAM;IACNE,WAAW,gBAAG,oBAAC,oBAAW,EAAKF,gBAAgB,CAAI;EACpD;EAEA,MAAMG,SAAS,GAAGT,KAAK,CAACU,IAAI,GAAGV,KAAK,CAACW,MAAM,CAACC,SAAS,GAAGZ,KAAK,CAACW,MAAM,CAACE,IAAI;EACzE,MAAMC,iBAAiB,GAAGd,KAAK,CAACU,IAAI,GACjCV,KAAK,CAACW,MAAM,CAACI,iBAAiB,GAC9Bf,KAAK,CAACW,MAAM,CAACf,QAAQ;EACxB,MAAMoB,SAAS,GAAGT,SAAS,GAAG,OAAO,GAAG,MAAM;EAE9C,MAAMU,aAAa,GAAG;IACrBpB,KAAK,EAAED,QAAQ,GAAGkB,iBAAiB,GAAGL,SAAS;IAC/CO;EACD,CAAc;EAEd,oBACC,oBAAC,oCAAkB,CAAC,QAAQ,QACzBE,OAAgC,IAAK;IACtC,MAAMC,OAAO,GACZ,IAAAC,gBAAS,EAAC;MACTC,YAAY,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE3B,KAAK;MAC5BQ,MAAM;MACNR;IACD,CAAC,CAAC,KAAK,SAAS;IACjB,oBACC,oBAAC,wBAAe;MACf,OAAO,EAAG+B,KAAK,IACd,IAAAC,kBAAW,EAAC;QACX5B,OAAO,EAAEA,OAAO;QAChB6B,aAAa,EAAEN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,aAAa;QACrCjC,KAAK;QACL+B;MACD,CAAC,CACD;MACD,kBAAkB,EAAErB,kBAAmB;MACvC,iBAAiB,EAAC,OAAO;MACzB,kBAAkB,EAAE;QACnBkB,OAAO;QACPvB;MACD,CAAE;MACF,MAAM,EAAEM,MAAO;MACf,QAAQ,EAAEN;IAAS,gBAEnB,oBAAC,iBAAI;MACJ,KAAK,EAAE,CAAC6B,MAAM,CAACC,SAAS,EAAEjC,KAAK,CAAE;MACjC,aAAa,EAAC;IAAM,GAEnBc,SAAS,IAAIC,WAAW,eACzB,oBAAC,aAAI;MACJ,OAAO,EAAEH,YAAa;MACtB,KAAK,EAAE,CACNoB,MAAM,CAACjC,KAAK,EACZ,CAACQ,KAAK,CAACU,IAAI,IAAIe,MAAM,CAACE,IAAI,EAC1BV,aAAa,EACbvB,UAAU;IACT,GAEDF,KAAK,CACA,EACN,CAACe,SAAS,IAAIC,WAAW,CACpB,CACU;EAEpB,CAAC,CAC4B;AAEhC,CAAC;AAEDlB,eAAe,CAACsC,WAAW,GAAG,kBAAkB;AAAC,eAElC,IAAAC,0BAAiB,EAACvC,eAAe,CAAC,EAEjD;AAAA;AACA,MAAMwC,wBAAwB,GAAG,IAAAD,0BAAiB,EAACvC,eAAe,CAAC;AACnE;AAAA;AAGA,MAAMmC,MAAM,GAAGM,uBAAU,CAACC,MAAM,CAAC;EAChCN,SAAS,EAAE;IACVO,aAAa,EAAE,KAAK;IACpBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,eAAe;IAC/BC,eAAe,EAAE,CAAC;IAClBC,iBAAiB,EAAE;EACpB,CAAC;EACD7C,KAAK,EAAE;IACN8C,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE;EACX,CAAC;EACDZ,IAAI,EAAE;IACLa,QAAQ,EAAE;EACX;AACD,CAAC,CAAC"}