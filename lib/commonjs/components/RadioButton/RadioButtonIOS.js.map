{"version":3,"names":["RadioButtonIOS","disabled","onPress","theme","status","value","testID","rest","context","checked","isChecked","contextValue","checkedColor","rippleColor","getSelectionControlIOSColor","customColor","color","undefined","event","handlePress","onValueChange","styles","container","opacity","displayName","StyleSheet","create","borderRadius","padding","withInternalTheme","RadioButtonIOSWithTheme"],"sources":["RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { GestureResponderEvent, StyleSheet, View } from 'react-native';\r\n\r\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\r\nimport { handlePress, isChecked } from './utils';\r\nimport { withInternalTheme } from '../../core/theming';\r\nimport type { $RemoveChildren, InternalTheme } from '../../types';\r\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\r\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\r\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\r\n\r\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\r\n\t/**\r\n\t * Value of the radio button\r\n\t */\r\n\tvalue: string;\r\n\t/**\r\n\t * Status of radio button.\r\n\t */\r\n\tstatus?: 'checked' | 'unchecked';\r\n\t/**\r\n\t * Whether radio is disabled.\r\n\t */\r\n\tdisabled?: boolean;\r\n\t/**\r\n\t * Function to execute on press.\r\n\t */\r\n\tonPress?: (e: GestureResponderEvent) => void;\r\n\t/**\r\n\t * Custom color for radio.\r\n\t */\r\n\tcolor?: string;\r\n\t/**\r\n\t * @optional\r\n\t */\r\n\ttheme: InternalTheme;\r\n\t/**\r\n\t * testID to be used on tests.\r\n\t */\r\n\ttestID?: string;\r\n};\r\n\r\n/**\r\n * Radio buttons allow the selection a single option from a set.\r\n * This component follows platform guidelines for iOS, but can be used\r\n * on any platform.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\r\n *     <figcaption>Enabled</figcaption>\r\n *   </figure>\r\n *   <figure>\r\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\r\n *     <figcaption>Disabled</figcaption>\r\n *   </figure>\r\n * </div>\r\n */\r\nconst RadioButtonIOS = ({\r\n\tdisabled,\r\n\tonPress,\r\n\ttheme,\r\n\tstatus,\r\n\tvalue,\r\n\ttestID,\r\n\t...rest\r\n}: Props) => {\r\n\treturn (\r\n\t\t<RadioButtonContext.Consumer>\r\n\t\t\t{(context?: RadioButtonContextType) => {\r\n\t\t\t\tconst checked =\r\n\t\t\t\t\tisChecked({\r\n\t\t\t\t\t\tcontextValue: context?.value,\r\n\t\t\t\t\t\tstatus,\r\n\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t}) === 'checked';\r\n\r\n\t\t\t\tconst { checkedColor, rippleColor } =\r\n\t\t\t\t\tgetSelectionControlIOSColor({\r\n\t\t\t\t\t\ttheme,\r\n\t\t\t\t\t\tdisabled,\r\n\t\t\t\t\t\tcustomColor: rest.color,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<TouchableRipple\r\n\t\t\t\t\t\t{...rest}\r\n\t\t\t\t\t\tborderless\r\n\t\t\t\t\t\trippleColor={rippleColor}\r\n\t\t\t\t\t\tonPress={\r\n\t\t\t\t\t\t\tdisabled\r\n\t\t\t\t\t\t\t\t? undefined\r\n\t\t\t\t\t\t\t\t: (event) => {\r\n\t\t\t\t\t\t\t\t\t\thandlePress({\r\n\t\t\t\t\t\t\t\t\t\t\tonPress,\r\n\t\t\t\t\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\t\t\t\t\tonValueChange:\r\n\t\t\t\t\t\t\t\t\t\t\t\tcontext?.onValueChange,\r\n\t\t\t\t\t\t\t\t\t\t\tevent,\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\taccessibilityRole=\"radio\"\r\n\t\t\t\t\t\taccessibilityState={{ disabled, checked }}\r\n\t\t\t\t\t\taccessibilityLiveRegion=\"polite\"\r\n\t\t\t\t\t\tstyle={styles.container}\r\n\t\t\t\t\t\ttestID={testID}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<View style={{ opacity: checked ? 1 : 0 }}>\r\n\t\t\t\t\t\t\t<MaterialCommunityIcon\r\n\t\t\t\t\t\t\t\tallowFontScaling={false}\r\n\t\t\t\t\t\t\t\tname=\"check\"\r\n\t\t\t\t\t\t\t\tsize={24}\r\n\t\t\t\t\t\t\t\tcolor={checkedColor}\r\n\t\t\t\t\t\t\t\tdirection=\"ltr\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t</TouchableRipple>\r\n\t\t\t\t);\r\n\t\t\t}}\r\n\t\t</RadioButtonContext.Consumer>\r\n\t);\r\n};\r\n\r\nRadioButtonIOS.displayName = 'RadioButton.IOS';\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tborderRadius: 18,\r\n\t\tpadding: 6,\r\n\t},\r\n});\r\n\r\nexport default withInternalTheme(RadioButtonIOS);\r\n\r\n// @component-docs ignore-next-line\r\nconst RadioButtonIOSWithTheme = withInternalTheme(RadioButtonIOS);\r\n// @component-docs ignore-next-line\r\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\r\n"],"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAiE;AAAA;AAAA;AAAA;AAiCjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,QAQV;EAAA,IARW;IACvBC,QAAQ;IACRC,OAAO;IACPC,KAAK;IACLC,MAAM;IACNC,KAAK;IACLC,MAAM;IACN,GAAGC;EACG,CAAC;EACP,oBACC,oBAAC,oCAAkB,CAAC,QAAQ,QACzBC,OAAgC,IAAK;IACtC,MAAMC,OAAO,GACZ,IAAAC,gBAAS,EAAC;MACTC,YAAY,EAAEH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEH,KAAK;MAC5BD,MAAM;MACNC;IACD,CAAC,CAAC,KAAK,SAAS;IAEjB,MAAM;MAAEO,YAAY;MAAEC;IAAY,CAAC,GAClC,IAAAC,mCAA2B,EAAC;MAC3BX,KAAK;MACLF,QAAQ;MACRc,WAAW,EAAER,IAAI,CAACS;IACnB,CAAC,CAAC;IAEH,oBACC,oBAAC,wBAAe,eACXT,IAAI;MACR,UAAU;MACV,WAAW,EAAEM,WAAY;MACzB,OAAO,EACNZ,QAAQ,GACLgB,SAAS,GACRC,KAAK,IAAK;QACX,IAAAC,kBAAW,EAAC;UACXjB,OAAO;UACPG,KAAK;UACLe,aAAa,EACZZ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEY,aAAa;UACvBF;QACD,CAAC,CAAC;MACF,CACH;MACD,iBAAiB,EAAC,OAAO;MACzB,kBAAkB,EAAE;QAAEjB,QAAQ;QAAEQ;MAAQ,CAAE;MAC1C,uBAAuB,EAAC,QAAQ;MAChC,KAAK,EAAEY,MAAM,CAACC,SAAU;MACxB,MAAM,EAAEhB;IAAO,iBAEf,oBAAC,iBAAI;MAAC,KAAK,EAAE;QAAEiB,OAAO,EAAEd,OAAO,GAAG,CAAC,GAAG;MAAE;IAAE,gBACzC,oBAAC,8BAAqB;MACrB,gBAAgB,EAAE,KAAM;MACxB,IAAI,EAAC,OAAO;MACZ,IAAI,EAAE,EAAG;MACT,KAAK,EAAEG,YAAa;MACpB,SAAS,EAAC;IAAK,EACd,CACI,CACU;EAEpB,CAAC,CAC4B;AAEhC,CAAC;AAEDZ,cAAc,CAACwB,WAAW,GAAG,iBAAiB;AAE9C,MAAMH,MAAM,GAAGI,uBAAU,CAACC,MAAM,CAAC;EAChCJ,SAAS,EAAE;IACVK,YAAY,EAAE,EAAE;IAChBC,OAAO,EAAE;EACV;AACD,CAAC,CAAC;AAAC,eAEY,IAAAC,0BAAiB,EAAC7B,cAAc,CAAC,EAEhD;AAAA;AACA,MAAM8B,uBAAuB,GAAG,IAAAD,0BAAiB,EAAC7B,cAAc,CAAC;AACjE;AAAA"}