{"version":3,"names":["ToggleButton","React","forwardRef","ref","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","context","checked","backgroundColor","getToggleButtonColor","borderColor","isV3","colors","outline","color","dark","white","black","alpha","rgb","string","e","onValueChange","selected","styles","content","StyleSheet","create","width","height","margin","withInternalTheme","ToggleButtonWithTheme"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n\tGestureResponderEvent,\n\tStyleProp,\n\tStyleSheet,\n\tViewStyle,\n\tView,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { getToggleButtonColor } from './utils';\nimport { withInternalTheme } from '../../core/theming';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\n\nexport type Props = {\n\t/**\n\t * Icon to display for the `ToggleButton`.\n\t */\n\ticon: IconSource;\n\t/**\n\t * Size of the icon.\n\t */\n\tsize?: number;\n\t/**\n\t * Custom text color for button.\n\t */\n\tcolor?: string;\n\t/**\n\t * Whether the button is disabled.\n\t */\n\tdisabled?: boolean;\n\t/**\n\t * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n\t */\n\taccessibilityLabel?: string;\n\t/**\n\t * Function to execute on press.\n\t */\n\tonPress?: (value?: GestureResponderEvent | string) => void;\n\t/**\n\t * Value of button.\n\t */\n\tvalue?: string;\n\t/**\n\t * Status of button.\n\t */\n\tstatus?: 'checked' | 'unchecked';\n\tstyle?: StyleProp<ViewStyle>;\n\t/**\n\t * @optional\n\t */\n\ttheme: InternalTheme;\n\tref?: React.RefObject<View>;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = React.forwardRef<View, Props>(\n\t(\n\t\t{\n\t\t\ticon,\n\t\t\tsize,\n\t\t\ttheme,\n\t\t\taccessibilityLabel,\n\t\t\tdisabled,\n\t\t\tstyle,\n\t\t\tvalue,\n\t\t\tstatus,\n\t\t\tonPress,\n\t\t\t...rest\n\t\t}: Props,\n\t\tref\n\t) => {\n\t\tconst borderRadius = theme.roundness;\n\n\t\treturn (\n\t\t\t<ToggleButtonGroupContext.Consumer>\n\t\t\t\t{(\n\t\t\t\t\tcontext: {\n\t\t\t\t\t\tvalue: string | null;\n\t\t\t\t\t\tonValueChange: Function;\n\t\t\t\t\t} | null\n\t\t\t\t) => {\n\t\t\t\t\tconst checked: boolean | null =\n\t\t\t\t\t\t(context && context.value === value) ||\n\t\t\t\t\t\tstatus === 'checked';\n\n\t\t\t\t\tconst backgroundColor = getToggleButtonColor({\n\t\t\t\t\t\ttheme,\n\t\t\t\t\t\tchecked,\n\t\t\t\t\t});\n\t\t\t\t\tconst borderColor = theme.isV3\n\t\t\t\t\t\t? theme.colors.outline\n\t\t\t\t\t\t: color(theme.dark ? white : black)\n\t\t\t\t\t\t\t\t.alpha(0.29)\n\t\t\t\t\t\t\t\t.rgb()\n\t\t\t\t\t\t\t\t.string();\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tborderless={false}\n\t\t\t\t\t\t\ticon={icon}\n\t\t\t\t\t\t\tonPress={(e?: GestureResponderEvent | string) => {\n\t\t\t\t\t\t\t\tif (onPress) {\n\t\t\t\t\t\t\t\t\tonPress(e);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (context) {\n\t\t\t\t\t\t\t\t\tcontext.onValueChange(\n\t\t\t\t\t\t\t\t\t\t!checked ? value : null\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\t\taccessibilityLabel={accessibilityLabel}\n\t\t\t\t\t\t\taccessibilityState={{ disabled, selected: checked }}\n\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\tstyle={[\n\t\t\t\t\t\t\t\tstyles.content,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t\t\t\t\tborderRadius,\n\t\t\t\t\t\t\t\t\tborderColor,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tstyle,\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t\t{...rest}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</ToggleButtonGroupContext.Consumer>\n\t\t);\n\t}\n);\n\nconst styles = StyleSheet.create({\n\tcontent: {\n\t\twidth: 42,\n\t\theight: 42,\n\t\tmargin: 0,\n\t},\n});\n\nexport default withInternalTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withInternalTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"],"mappings":";;;;;;AAAA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAGA;AAAkD;AAAA;AAAA;AAAA;AA2ClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,YAAY,gBAAGC,KAAK,CAACC,UAAU,CACpC,OAaCC,GAAG,KACC;EAAA,IAbJ;IACCC,IAAI;IACJC,IAAI;IACJC,KAAK;IACLC,kBAAkB;IAClBC,QAAQ;IACRC,KAAK;IACLC,KAAK;IACLC,MAAM;IACNC,OAAO;IACP,GAAGC;EACG,CAAC;EAGR,MAAMC,YAAY,GAAGR,KAAK,CAACS,SAAS;EAEpC,oBACC,oBAAC,2CAAwB,CAAC,QAAQ,QAEhCC,OAGQ,IACJ;IACJ,MAAMC,OAAuB,GAC3BD,OAAO,IAAIA,OAAO,CAACN,KAAK,KAAKA,KAAK,IACnCC,MAAM,KAAK,SAAS;IAErB,MAAMO,eAAe,GAAG,IAAAC,2BAAoB,EAAC;MAC5Cb,KAAK;MACLW;IACD,CAAC,CAAC;IACF,MAAMG,WAAW,GAAGd,KAAK,CAACe,IAAI,GAC3Bf,KAAK,CAACgB,MAAM,CAACC,OAAO,GACpB,IAAAC,cAAK,EAAClB,KAAK,CAACmB,IAAI,GAAGC,aAAK,GAAGC,aAAK,CAAC,CAChCC,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,EAAE,CACLC,MAAM,EAAE;IAEZ,oBACC,oBAAC,mBAAU;MACV,UAAU,EAAE,KAAM;MAClB,IAAI,EAAE1B,IAAK;MACX,OAAO,EAAG2B,CAAkC,IAAK;QAChD,IAAInB,OAAO,EAAE;UACZA,OAAO,CAACmB,CAAC,CAAC;QACX;QAEA,IAAIf,OAAO,EAAE;UACZA,OAAO,CAACgB,aAAa,CACpB,CAACf,OAAO,GAAGP,KAAK,GAAG,IAAI,CACvB;QACF;MACD,CAAE;MACF,IAAI,EAAEL,IAAK;MACX,kBAAkB,EAAEE,kBAAmB;MACvC,kBAAkB,EAAE;QAAEC,QAAQ;QAAEyB,QAAQ,EAAEhB;MAAQ,CAAE;MACpD,QAAQ,EAAET,QAAS;MACnB,KAAK,EAAE,CACN0B,MAAM,CAACC,OAAO,EACd;QACCjB,eAAe;QACfJ,YAAY;QACZM;MACD,CAAC,EACDX,KAAK,CACJ;MACF,GAAG,EAAEN;IAAI,GACLU,IAAI,EACP;EAEJ,CAAC,CACkC;AAEtC,CAAC,CACD;AAED,MAAMqB,MAAM,GAAGE,uBAAU,CAACC,MAAM,CAAC;EAChCF,OAAO,EAAE;IACRG,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE;EACT;AACD,CAAC,CAAC;AAAC,eAEY,IAAAC,0BAAiB,EAACzC,YAAY,CAAC,EAE9C;AAAA;AACA,MAAM0C,qBAAqB,GAAG,IAAAD,0BAAiB,EAACzC,YAAY,CAAC;AAC7D;AAAA"}