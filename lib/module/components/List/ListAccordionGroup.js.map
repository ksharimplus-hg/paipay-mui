{"version":3,"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","expandedId","expandedIdProp","onAccordionPress","children","setExpandedId","useState","undefined","onAccordionPressDefault","newExpandedId","currentExpandedId","displayName"],"sources":["ListAccordionGroup.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nexport type Props = {\r\n\t/**\r\n\t * Function to execute on selection change.\r\n\t */\r\n\tonAccordionPress?: (expandedId: string | number) => void;\r\n\t/**\r\n\t * Id of the currently expanded list accordion\r\n\t */\r\n\texpandedId?: string | number;\r\n\t/**\r\n\t * React elements containing list accordions\r\n\t */\r\n\tchildren: React.ReactNode;\r\n};\r\n\r\nexport type ListAccordionGroupContextType = {\r\n\texpandedId: string | number | undefined;\r\n\tonAccordionPress: (expandedId: string | number) => void;\r\n} | null;\r\n\r\nexport const ListAccordionGroupContext =\r\n\tReact.createContext<ListAccordionGroupContextType>(null);\r\n\r\n/**\r\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\r\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\r\n * At most one Accordion can be expanded at a given time.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { View, Text } from 'react-native';\r\n * import { List } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <List.AccordionGroup>\r\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\r\n *       <List.Item title=\"Item 1\" />\r\n *     </List.Accordion>\r\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\r\n *       <List.Item title=\"Item 2\" />\r\n *     </List.Accordion>\r\n *     <View>\r\n *       <Text>\r\n *         List.Accordion can be wrapped because implementation uses React.Context.\r\n *       </Text>\r\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\r\n *         <List.Item title=\"Item 3\" />\r\n *       </List.Accordion>\r\n *     </View>\r\n *   </List.AccordionGroup>\r\n * );\r\n *\r\n * export default MyComponent;\r\n *```\r\n */\r\nconst ListAccordionGroup = ({\r\n\texpandedId: expandedIdProp,\r\n\tonAccordionPress,\r\n\tchildren,\r\n}: Props) => {\r\n\tconst [expandedId, setExpandedId] = React.useState<\r\n\t\tstring | number | undefined\r\n\t>(undefined);\r\n\r\n\tconst onAccordionPressDefault = (newExpandedId: string | number) => {\r\n\t\tsetExpandedId((currentExpandedId) =>\r\n\t\t\tcurrentExpandedId === newExpandedId ? undefined : newExpandedId\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ListAccordionGroupContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\texpandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\r\n\t\t\t\tonAccordionPress: onAccordionPress || onAccordionPressDefault,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</ListAccordionGroupContext.Provider>\r\n\t);\r\n};\r\n\r\nListAccordionGroup.displayName = 'List.AccordionGroup';\r\n\r\nexport default ListAccordionGroup;\r\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAsB9B,OAAO,MAAMC,yBAAyB,gBACrCD,KAAK,CAACE,aAAa,CAAgC,IAAI,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,QAId;EAAA,IAJe;IAC3BC,UAAU,EAAEC,cAAc;IAC1BC,gBAAgB;IAChBC;EACM,CAAC;EACP,MAAM,CAACH,UAAU,EAAEI,aAAa,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAEhDC,SAAS,CAAC;EAEZ,MAAMC,uBAAuB,GAAIC,aAA8B,IAAK;IACnEJ,aAAa,CAAEK,iBAAiB,IAC/BA,iBAAiB,KAAKD,aAAa,GAAGF,SAAS,GAAGE,aAAa,CAC/D;EACF,CAAC;EAED,oBACC,oBAAC,yBAAyB,CAAC,QAAQ;IAClC,KAAK,EAAE;MACNR,UAAU,EAAEC,cAAc,IAAID,UAAU;MAAE;MAC1CE,gBAAgB,EAAEA,gBAAgB,IAAIK;IACvC;EAAE,GAEDJ,QAAQ,CAC2B;AAEvC,CAAC;AAEDJ,kBAAkB,CAACW,WAAW,GAAG,qBAAqB;AAEtD,eAAeX,kBAAkB"}