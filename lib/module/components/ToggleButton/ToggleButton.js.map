{"version":3,"names":["React","StyleSheet","color","ToggleButtonGroupContext","getToggleButtonColor","withInternalTheme","black","white","IconButton","ToggleButton","forwardRef","ref","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","context","checked","backgroundColor","borderColor","isV3","colors","outline","dark","alpha","rgb","string","e","onValueChange","selected","styles","content","create","width","height","margin","ToggleButtonWithTheme"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n\tGestureResponderEvent,\r\n\tStyleProp,\r\n\tStyleSheet,\r\n\tViewStyle,\r\n\tView,\r\n} from 'react-native';\r\n\r\nimport color from 'color';\r\n\r\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\r\nimport { getToggleButtonColor } from './utils';\r\nimport { withInternalTheme } from '../../core/theming';\r\nimport { black, white } from '../../styles/themes/v2/colors';\r\nimport type { InternalTheme } from '../../types';\r\nimport type { IconSource } from '../Icon';\r\nimport IconButton from '../IconButton/IconButton';\r\n\r\nexport type Props = {\r\n\t/**\r\n\t * Icon to display for the `ToggleButton`.\r\n\t */\r\n\ticon: IconSource;\r\n\t/**\r\n\t * Size of the icon.\r\n\t */\r\n\tsize?: number;\r\n\t/**\r\n\t * Custom text color for button.\r\n\t */\r\n\tcolor?: string;\r\n\t/**\r\n\t * Whether the button is disabled.\r\n\t */\r\n\tdisabled?: boolean;\r\n\t/**\r\n\t * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\r\n\t */\r\n\taccessibilityLabel?: string;\r\n\t/**\r\n\t * Function to execute on press.\r\n\t */\r\n\tonPress?: (value?: GestureResponderEvent | string) => void;\r\n\t/**\r\n\t * Value of button.\r\n\t */\r\n\tvalue?: string;\r\n\t/**\r\n\t * Status of button.\r\n\t */\r\n\tstatus?: 'checked' | 'unchecked';\r\n\tstyle?: StyleProp<ViewStyle>;\r\n\t/**\r\n\t * @optional\r\n\t */\r\n\ttheme: InternalTheme;\r\n\tref?: React.RefObject<View>;\r\n};\r\n\r\n/**\r\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\r\n * a group should share a common container.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { ToggleButton } from 'react-native-paper';\r\n *\r\n * const ToggleButtonExample = () => {\r\n *   const [status, setStatus] = React.useState('checked');\r\n *\r\n *   const onButtonToggle = value => {\r\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\r\n *   };\r\n *\r\n *   return (\r\n *     <ToggleButton\r\n *       icon=\"bluetooth\"\r\n *       value=\"bluetooth\"\r\n *       status={status}\r\n *       onPress={onButtonToggle}\r\n *     />\r\n *   );\r\n * };\r\n *\r\n * export default ToggleButtonExample;\r\n *\r\n * ```\r\n */\r\nconst ToggleButton = React.forwardRef<View, Props>(\r\n\t(\r\n\t\t{\r\n\t\t\ticon,\r\n\t\t\tsize,\r\n\t\t\ttheme,\r\n\t\t\taccessibilityLabel,\r\n\t\t\tdisabled,\r\n\t\t\tstyle,\r\n\t\t\tvalue,\r\n\t\t\tstatus,\r\n\t\t\tonPress,\r\n\t\t\t...rest\r\n\t\t}: Props,\r\n\t\tref\r\n\t) => {\r\n\t\tconst borderRadius = theme.roundness;\r\n\r\n\t\treturn (\r\n\t\t\t<ToggleButtonGroupContext.Consumer>\r\n\t\t\t\t{(\r\n\t\t\t\t\tcontext: {\r\n\t\t\t\t\t\tvalue: string | null;\r\n\t\t\t\t\t\tonValueChange: Function;\r\n\t\t\t\t\t} | null\r\n\t\t\t\t) => {\r\n\t\t\t\t\tconst checked: boolean | null =\r\n\t\t\t\t\t\t(context && context.value === value) ||\r\n\t\t\t\t\t\tstatus === 'checked';\r\n\r\n\t\t\t\t\tconst backgroundColor = getToggleButtonColor({\r\n\t\t\t\t\t\ttheme,\r\n\t\t\t\t\t\tchecked,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconst borderColor = theme.isV3\r\n\t\t\t\t\t\t? theme.colors.outline\r\n\t\t\t\t\t\t: color(theme.dark ? white : black)\r\n\t\t\t\t\t\t\t\t.alpha(0.29)\r\n\t\t\t\t\t\t\t\t.rgb()\r\n\t\t\t\t\t\t\t\t.string();\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\tborderless={false}\r\n\t\t\t\t\t\t\ticon={icon}\r\n\t\t\t\t\t\t\tonPress={(e?: GestureResponderEvent | string) => {\r\n\t\t\t\t\t\t\t\tif (onPress) {\r\n\t\t\t\t\t\t\t\t\tonPress(e);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (context) {\r\n\t\t\t\t\t\t\t\t\tcontext.onValueChange(\r\n\t\t\t\t\t\t\t\t\t\t!checked ? value : null\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\t\taccessibilityLabel={accessibilityLabel}\r\n\t\t\t\t\t\t\taccessibilityState={{ disabled, selected: checked }}\r\n\t\t\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\t\t\tstyle={[\r\n\t\t\t\t\t\t\t\tstyles.content,\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tbackgroundColor,\r\n\t\t\t\t\t\t\t\t\tborderRadius,\r\n\t\t\t\t\t\t\t\t\tborderColor,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tstyle,\r\n\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t\tref={ref}\r\n\t\t\t\t\t\t\t{...rest}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t}}\r\n\t\t\t</ToggleButtonGroupContext.Consumer>\r\n\t\t);\r\n\t}\r\n);\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontent: {\r\n\t\twidth: 42,\r\n\t\theight: 42,\r\n\t\tmargin: 0,\r\n\t},\r\n});\r\n\r\nexport default withInternalTheme(ToggleButton);\r\n\r\n// @component-docs ignore-next-line\r\nconst ToggleButtonWithTheme = withInternalTheme(ToggleButton);\r\n// @component-docs ignore-next-line\r\nexport { ToggleButtonWithTheme as ToggleButton };\r\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAGCC,UAAU,QAGJ,cAAc;AAErB,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,wBAAwB,QAAQ,qBAAqB;AAC9D,SAASC,oBAAoB,QAAQ,SAAS;AAC9C,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD,SAASC,KAAK,EAAEC,KAAK,QAAQ,+BAA+B;AAG5D,OAAOC,UAAU,MAAM,0BAA0B;AA2CjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,gBAAGT,KAAK,CAACU,UAAU,CACpC,OAaCC,GAAG,KACC;EAAA,IAbJ;IACCC,IAAI;IACJC,IAAI;IACJC,KAAK;IACLC,kBAAkB;IAClBC,QAAQ;IACRC,KAAK;IACLC,KAAK;IACLC,MAAM;IACNC,OAAO;IACP,GAAGC;EACG,CAAC;EAGR,MAAMC,YAAY,GAAGR,KAAK,CAACS,SAAS;EAEpC,oBACC,oBAAC,wBAAwB,CAAC,QAAQ,QAEhCC,OAGQ,IACJ;IACJ,MAAMC,OAAuB,GAC3BD,OAAO,IAAIA,OAAO,CAACN,KAAK,KAAKA,KAAK,IACnCC,MAAM,KAAK,SAAS;IAErB,MAAMO,eAAe,GAAGtB,oBAAoB,CAAC;MAC5CU,KAAK;MACLW;IACD,CAAC,CAAC;IACF,MAAME,WAAW,GAAGb,KAAK,CAACc,IAAI,GAC3Bd,KAAK,CAACe,MAAM,CAACC,OAAO,GACpB5B,KAAK,CAACY,KAAK,CAACiB,IAAI,GAAGxB,KAAK,GAAGD,KAAK,CAAC,CAChC0B,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,EAAE,CACLC,MAAM,EAAE;IAEZ,oBACC,oBAAC,UAAU;MACV,UAAU,EAAE,KAAM;MAClB,IAAI,EAAEtB,IAAK;MACX,OAAO,EAAGuB,CAAkC,IAAK;QAChD,IAAIf,OAAO,EAAE;UACZA,OAAO,CAACe,CAAC,CAAC;QACX;QAEA,IAAIX,OAAO,EAAE;UACZA,OAAO,CAACY,aAAa,CACpB,CAACX,OAAO,GAAGP,KAAK,GAAG,IAAI,CACvB;QACF;MACD,CAAE;MACF,IAAI,EAAEL,IAAK;MACX,kBAAkB,EAAEE,kBAAmB;MACvC,kBAAkB,EAAE;QAAEC,QAAQ;QAAEqB,QAAQ,EAAEZ;MAAQ,CAAE;MACpD,QAAQ,EAAET,QAAS;MACnB,KAAK,EAAE,CACNsB,MAAM,CAACC,OAAO,EACd;QACCb,eAAe;QACfJ,YAAY;QACZK;MACD,CAAC,EACDV,KAAK,CACJ;MACF,GAAG,EAAEN;IAAI,GACLU,IAAI,EACP;EAEJ,CAAC,CACkC;AAEtC,CAAC,CACD;AAED,MAAMiB,MAAM,GAAGrC,UAAU,CAACuC,MAAM,CAAC;EAChCD,OAAO,EAAE;IACRE,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE;EACT;AACD,CAAC,CAAC;AAEF,eAAetC,iBAAiB,CAACI,YAAY,CAAC;;AAE9C;AACA,MAAMmC,qBAAqB,GAAGvC,iBAAiB,CAACI,YAAY,CAAC;AAC7D;AACA,SAASmC,qBAAqB,IAAInC,YAAY"}