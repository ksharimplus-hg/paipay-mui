{"version":3,"names":["React","StyleSheet","View","useInternalTheme","IconButton","ICON_SIZE","getConstants","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","icon","topPosition","side","isV3","ICON_OFFSET","top","contextState","TextInputIcon","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","e","theme","iconColor","disabled","colors","onSurface","onSurfaceVariant","text","styles","container","iconButton","displayName","defaultProps","create","position","width","height","justifyContent","alignItems","margin"],"sources":["TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n\tGestureResponderEvent,\r\n\tStyleProp,\r\n\tStyleSheet,\r\n\tView,\r\n\tViewStyle,\r\n} from 'react-native';\r\n\r\nimport { useInternalTheme } from '../../../core/theming';\r\nimport type { $Omit, ThemeProp } from '../../../types';\r\nimport type { IconSource } from '../../Icon';\r\nimport IconButton from '../../IconButton/IconButton';\r\nimport { ICON_SIZE } from '../constants';\r\nimport { getConstants } from '../helpers';\r\n\r\nexport type Props = $Omit<\r\n\tReact.ComponentProps<typeof IconButton>,\r\n\t'icon' | 'theme' | 'color'\r\n> & {\r\n\t/**\r\n\t * @renamed Renamed from 'name' to 'icon` in v5.x\r\n\t * Icon to show.\r\n\t */\r\n\ticon: IconSource;\r\n\t/**\r\n\t * Function to execute on press.\r\n\t */\r\n\tonPress?: (e: GestureResponderEvent) => void;\r\n\t/**\r\n\t * Whether the TextInput will focus after onPress.\r\n\t */\r\n\tforceTextInputFocus?: boolean;\r\n\t/**\r\n\t * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\r\n\t */\r\n\tcolor?: ((isTextInputFocused: boolean) => string | undefined) | string;\r\n\tstyle?: StyleProp<ViewStyle>;\r\n\t/**\r\n\t * @optional\r\n\t */\r\n\ttheme?: ThemeProp;\r\n};\r\n\r\ntype StyleContextType = {\r\n\tstyle: StyleProp<ViewStyle>;\r\n\tisTextInputFocused: boolean;\r\n\tforceFocus: () => void;\r\n\ttestID: string;\r\n};\r\n\r\nconst StyleContext = React.createContext<StyleContextType>({\r\n\tstyle: {},\r\n\tisTextInputFocused: false,\r\n\tforceFocus: () => {},\r\n\ttestID: '',\r\n});\r\n\r\nconst IconAdornment: React.FunctionComponent<\r\n\t{\r\n\t\ttestID: string;\r\n\t\ticon: React.ReactNode;\r\n\t\ttopPosition: number;\r\n\t\tside: 'left' | 'right';\r\n\t} & Omit<StyleContextType, 'style'>\r\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus, testID }) => {\r\n\tconst { isV3 } = useInternalTheme();\r\n\tconst { ICON_OFFSET } = getConstants(isV3);\r\n\r\n\tconst style = {\r\n\t\ttop: topPosition,\r\n\t\t[side]: ICON_OFFSET,\r\n\t};\r\n\tconst contextState = { style, isTextInputFocused, forceFocus, testID };\r\n\r\n\treturn (\r\n\t\t<StyleContext.Provider value={contextState}>\r\n\t\t\t{icon}\r\n\t\t</StyleContext.Provider>\r\n\t);\r\n};\r\n\r\n/**\r\n * A component to render a leading / trailing icon in the TextInput\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"small\" src=\"screenshots/textinput-flat.icon.png\" />\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { TextInput } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => {\r\n *   const [text, setText] = React.useState('');\r\n *\r\n *   return (\r\n *     <TextInput\r\n *       label=\"Password\"\r\n *       secureTextEntry\r\n *       right={<TextInput.Icon icon=\"eye\" />}\r\n *     />\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\n\r\nconst TextInputIcon = ({\r\n\ticon,\r\n\tonPress,\r\n\tforceTextInputFocus,\r\n\tcolor,\r\n\t...rest\r\n}: Props) => {\r\n\tconst { style, isTextInputFocused, forceFocus, testID } =\r\n\t\tReact.useContext(StyleContext);\r\n\r\n\tconst onPressWithFocusControl = React.useCallback(\r\n\t\t(e: GestureResponderEvent) => {\r\n\t\t\tif (forceTextInputFocus && !isTextInputFocused) {\r\n\t\t\t\tforceFocus();\r\n\t\t\t}\r\n\r\n\t\t\tonPress?.(e);\r\n\t\t},\r\n\t\t[forceTextInputFocus, forceFocus, isTextInputFocused, onPress]\r\n\t);\r\n\r\n\tconst theme = useInternalTheme();\r\n\r\n\tlet iconColor = color;\r\n\r\n\tif (theme.isV3) {\r\n\t\tif (rest.disabled) {\r\n\t\t\ticonColor = theme.colors.onSurface;\r\n\t\t}\r\n\t\ticonColor = theme.colors.onSurfaceVariant;\r\n\t} else {\r\n\t\ticonColor = theme.colors.text;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<View style={[styles.container, style]}>\r\n\t\t\t<IconButton\r\n\t\t\t\ticon={icon}\r\n\t\t\t\tstyle={styles.iconButton}\r\n\t\t\t\tsize={ICON_SIZE}\r\n\t\t\t\tonPress={onPressWithFocusControl}\r\n\t\t\t\ticonColor={\r\n\t\t\t\t\ttypeof color === 'function'\r\n\t\t\t\t\t\t? color(isTextInputFocused)\r\n\t\t\t\t\t\t: iconColor\r\n\t\t\t\t}\r\n\t\t\t\ttestID={testID}\r\n\t\t\t\t{...rest}\r\n\t\t\t/>\r\n\t\t</View>\r\n\t);\r\n};\r\nTextInputIcon.displayName = 'TextInput.Icon';\r\n\r\nTextInputIcon.defaultProps = {\r\n\tforceTextInputFocus: true,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tposition: 'absolute',\r\n\t\twidth: ICON_SIZE,\r\n\t\theight: ICON_SIZE,\r\n\t\tjustifyContent: 'center',\r\n\t\talignItems: 'center',\r\n\t},\r\n\ticonButton: {\r\n\t\tmargin: 0,\r\n\t},\r\n});\r\n\r\nexport default TextInputIcon;\r\n\r\n// @component-docs ignore-next-line\r\nexport { IconAdornment };\r\n"],"mappings":"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"}