{"version":3,"names":["React","AdornmentSide","AdornmentType","InputMode","TextInputAffix","AffixAdornment","TextInputIcon","IconAdornment","getConstants","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","isV3","OUTLINED_INPUT_OFFSET","ADORNMENT_OFFSET","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","testID"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport type {\n\tLayoutChangeEvent,\n\tTextStyle,\n\tStyleProp,\n\tAnimated,\n} from 'react-native';\n\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport type {\n\tAdornmentConfig,\n\tAdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { getConstants } from '../helpers';\n\nexport function getAdornmentConfig({\n\tleft,\n\tright,\n}: {\n\tleft?: React.ReactNode;\n\tright?: React.ReactNode;\n}): Array<AdornmentConfig> {\n\tlet adornmentConfig: any[] = [];\n\tif (left || right) {\n\t\t[\n\t\t\t{ side: AdornmentSide.Left, adornment: left },\n\t\t\t{ side: AdornmentSide.Right, adornment: right },\n\t\t].forEach(({ side, adornment }) => {\n\t\t\tif (adornment && React.isValidElement(adornment)) {\n\t\t\t\tlet type;\n\t\t\t\tif (adornment.type === TextInputAffix) {\n\t\t\t\t\ttype = AdornmentType.Affix;\n\t\t\t\t} else if (adornment.type === TextInputIcon) {\n\t\t\t\t\ttype = AdornmentType.Icon;\n\t\t\t\t}\n\t\t\t\tadornmentConfig.push({\n\t\t\t\t\tside,\n\t\t\t\t\ttype,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\treturn adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n\tadornmentConfig,\n\tleftAffixWidth,\n\trightAffixWidth,\n\tpaddingHorizontal,\n\tinputOffset = 0,\n\tmode,\n\tisV3,\n}: {\n\tinputOffset?: number;\n\tadornmentConfig: AdornmentConfig[];\n\tleftAffixWidth: number;\n\trightAffixWidth: number;\n\tmode?: 'outlined' | 'flat';\n\tpaddingHorizontal?: number | string;\n\tisV3?: boolean;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n\tconst { OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET } = getConstants(isV3);\n\n\tif (adornmentConfig.length) {\n\t\tconst adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n\t\t\t({ type, side }: AdornmentConfig) => {\n\t\t\t\tconst isLeftSide = side === AdornmentSide.Left;\n\t\t\t\tconst inputModeAdornemntOffset =\n\t\t\t\t\tmode === InputMode.Outlined\n\t\t\t\t\t\t? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n\t\t\t\t\t\t: ADORNMENT_OFFSET;\n\t\t\t\tconst paddingKey = `padding${captalize(side)}`;\n\t\t\t\tconst affixWidth = isLeftSide\n\t\t\t\t\t? leftAffixWidth\n\t\t\t\t\t: rightAffixWidth;\n\t\t\t\tconst padding =\n\t\t\t\t\ttypeof paddingHorizontal === 'number'\n\t\t\t\t\t\t? paddingHorizontal\n\t\t\t\t\t\t: inputModeAdornemntOffset;\n\t\t\t\tconst offset = affixWidth + padding;\n\n\t\t\t\tconst isAffix = type === AdornmentType.Affix;\n\t\t\t\tconst marginKey = `margin${captalize(side)}`;\n\n\t\t\t\treturn {\n\t\t\t\t\t[marginKey]: isAffix ? 0 : offset,\n\t\t\t\t\t[paddingKey]: isAffix ? offset : inputOffset,\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t\tconst allStyleAdjustmentsMerged =\n\t\t\tadornmentStyleAdjustmentForNativeInput.reduce(\n\t\t\t\t(mergedStyles, currentStyle) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...mergedStyles,\n\t\t\t\t\t\t...currentStyle,\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t{}\n\t\t\t);\n\t\treturn allStyleAdjustmentsMerged;\n\t} else {\n\t\treturn [{}];\n\t}\n}\n\nconst captalize = (text: string) =>\n\ttext.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n\tforceFocus: () => void;\n\tadornmentConfig: AdornmentConfig[];\n\ttopPosition: {\n\t\t[AdornmentType.Affix]: {\n\t\t\t[AdornmentSide.Left]: number | null;\n\t\t\t[AdornmentSide.Right]: number | null;\n\t\t};\n\t\t[AdornmentType.Icon]: number;\n\t};\n\tonAffixChange: {\n\t\t[AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n\t\t[AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n\t};\n\tleft?: React.ReactNode;\n\tright?: React.ReactNode;\n\ttextStyle?: StyleProp<TextStyle>;\n\tvisible?: Animated.Value;\n\tisTextInputFocused: boolean;\n\tpaddingHorizontal?: number | string;\n\tmaxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n\tadornmentConfig,\n\tleft,\n\tright,\n\tonAffixChange,\n\ttextStyle,\n\tvisible,\n\ttopPosition,\n\tisTextInputFocused,\n\tforceFocus,\n\tpaddingHorizontal,\n\tmaxFontSizeMultiplier,\n}) => {\n\tif (adornmentConfig.length) {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n\t\t\t\t\tlet inputAdornmentComponent;\n\t\t\t\t\tif (side === AdornmentSide.Left) {\n\t\t\t\t\t\tinputAdornmentComponent = left;\n\t\t\t\t\t} else if (side === AdornmentSide.Right) {\n\t\t\t\t\t\tinputAdornmentComponent = right;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst commonProps = {\n\t\t\t\t\t\tside: side,\n\t\t\t\t\t\ttestID: `${side}-${type}-adornment`,\n\t\t\t\t\t\tisTextInputFocused,\n\t\t\t\t\t\tpaddingHorizontal,\n\t\t\t\t\t};\n\t\t\t\t\tif (type === AdornmentType.Icon) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<IconAdornment\n\t\t\t\t\t\t\t\t{...commonProps}\n\t\t\t\t\t\t\t\tkey={side}\n\t\t\t\t\t\t\t\ticon={inputAdornmentComponent}\n\t\t\t\t\t\t\t\ttopPosition={topPosition[AdornmentType.Icon]}\n\t\t\t\t\t\t\t\tforceFocus={forceFocus}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (type === AdornmentType.Affix) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<AffixAdornment\n\t\t\t\t\t\t\t\t{...commonProps}\n\t\t\t\t\t\t\t\tkey={side}\n\t\t\t\t\t\t\t\ttopPosition={\n\t\t\t\t\t\t\t\t\ttopPosition[AdornmentType.Affix][side]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\taffix={inputAdornmentComponent}\n\t\t\t\t\t\t\t\ttextStyle={textStyle}\n\t\t\t\t\t\t\t\tonLayout={onAffixChange[side]}\n\t\t\t\t\t\t\t\tvisible={visible}\n\t\t\t\t\t\t\t\tmaxFontSizeMultiplier={maxFontSizeMultiplier}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t})}\n\t\t\t</>\n\t\t);\n\t} else {\n\t\treturn null;\n\t}\n};\n\nexport default TextInputAdornment;\n"],"mappings":"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"}