{"version":3,"names":["React","StyleSheet","View","SegmentedButtonItem","getDisabledSegmentedButtonStyle","useTheme","SegmentedButtons","value","onValueChange","buttons","multiSelect","density","style","theme","styles","row","map","item","i","disabledChildStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","nextValue","filter","val","create","flexDirection"],"sources":["SegmentedButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n\tGestureResponderEvent,\n\tStyleProp,\n\tStyleSheet,\n\tView,\n\tViewStyle,\n} from 'react-native';\n\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\nimport { useTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\n\ntype ConditionalValue =\n\t| {\n\t\t\t/**\n\t\t\t * Array of the currently selected segmented button values.\n\t\t\t */\n\t\t\tvalue: string[];\n\t\t\t/**\n\t\t\t * Support multiple selected options.\n\t\t\t */\n\t\t\tmultiSelect: true;\n\t\t\t/**\n\t\t\t * Function to execute on selection change\n\t\t\t */\n\t\t\tonValueChange: (value: string[]) => void;\n\t  }\n\t| {\n\t\t\t/**\n\t\t\t * Value of the currently selected segmented button.\n\t\t\t */\n\t\t\tvalue: string;\n\t\t\t/**\n\t\t\t * Support multiple selected options.\n\t\t\t */\n\t\t\tmultiSelect?: false;\n\t\t\t/**\n\t\t\t * Function to execute on selection change\n\t\t\t */\n\t\t\tonValueChange: (value: string) => void;\n\t  };\n\nexport type Props = {\n\t/**\n\t * Buttons to display as options in toggle button.\n\t * Button should contain the following properties:\n\t * - `value`: value of button (required)\n\t * - `icon`: icon to display for the item\n\t * - `disabled`: whether the button is disabled\n\t * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n\t * - `onPress`: callback that is called when button is pressed\n\t * - `label`: label text of the button\n\t * - `showSelectedCheck`: show optional check icon to indicate selected state\n\t * - `style`: pass additional styles for the button\n\t * - `testID`: testID to be used on tests\n\t */\n\tbuttons: {\n\t\tvalue: string;\n\t\ticon?: IconSource;\n\t\tdisabled?: boolean;\n\t\taccessibilityLabel?: string;\n\t\tonPress?: (event: GestureResponderEvent) => void;\n\t\tlabel?: string;\n\t\tshowSelectedCheck?: boolean;\n\t\tstyle?: StyleProp<ViewStyle>;\n\t\ttestID?: string;\n\t}[];\n\t/**\n\t * Density is applied to the height, to allow usage in denser UIs\n\t */\n\tdensity?: 'regular' | 'small' | 'medium' | 'high';\n\tstyle?: StyleProp<ViewStyle>;\n} & ConditionalValue;\n\n/**\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/segmented-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SafeAreaView, StyleSheet } from 'react-native';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <SegmentedButtons\n *         value={value}\n *         onValueChange={setValue}\n *         buttons={[\n *           {\n *             value: 'walk',\n *             label: 'Walking',\n *           },\n *           {\n *             value: 'train',\n *             label: 'Transit',\n *           },\n *           { value: 'drive', label: 'Driving' },\n *         ]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     alignItems: 'center',\n *   },\n * });\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = ({\n\tvalue,\n\tonValueChange,\n\tbuttons,\n\tmultiSelect,\n\tdensity,\n\tstyle,\n}: Props) => {\n\tconst theme = useTheme();\n\treturn (\n\t\t<View style={[styles.row, style]}>\n\t\t\t{buttons.map((item, i) => {\n\t\t\t\tconst disabledChildStyle = getDisabledSegmentedButtonStyle({\n\t\t\t\t\ttheme,\n\t\t\t\t\tbuttons,\n\t\t\t\t\tindex: i,\n\t\t\t\t});\n\t\t\t\tconst segment =\n\t\t\t\t\ti === 0\n\t\t\t\t\t\t? 'first'\n\t\t\t\t\t\t: i === buttons.length - 1\n\t\t\t\t\t\t? 'last'\n\t\t\t\t\t\t: undefined;\n\n\t\t\t\tconst checked =\n\t\t\t\t\tmultiSelect && Array.isArray(value)\n\t\t\t\t\t\t? value.includes(item.value)\n\t\t\t\t\t\t: value === item.value;\n\n\t\t\t\tconst onPress = (e: GestureResponderEvent) => {\n\t\t\t\t\titem.onPress?.(e);\n\n\t\t\t\t\tconst nextValue =\n\t\t\t\t\t\tmultiSelect && Array.isArray(value)\n\t\t\t\t\t\t\t? checked\n\t\t\t\t\t\t\t\t? value.filter((val) => item.value !== val)\n\t\t\t\t\t\t\t\t: [...value, item.value]\n\t\t\t\t\t\t\t: item.value;\n\n\t\t\t\t\t/* @ts-ignore */\n\t\t\t\t\tonValueChange(nextValue);\n\t\t\t\t};\n\n\t\t\t\treturn (\n\t\t\t\t\t<SegmentedButtonItem\n\t\t\t\t\t\t{...item}\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tchecked={checked}\n\t\t\t\t\t\tsegment={segment}\n\t\t\t\t\t\tdensity={density}\n\t\t\t\t\t\tonPress={onPress}\n\t\t\t\t\t\tstyle={[item.style, disabledChildStyle]}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</View>\n\t);\n};\n\nconst styles = StyleSheet.create({\n\trow: {\n\t\tflexDirection: 'row',\n\t},\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAGCC,UAAU,EACVC,IAAI,QAEE,cAAc;AAErB,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,+BAA+B,QAAQ,SAAS;AACzD,SAASC,QAAQ,QAAQ,oBAAoB;AAiE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,QAOZ;EAAA,IAPa;IACzBC,KAAK;IACLC,aAAa;IACbC,OAAO;IACPC,WAAW;IACXC,OAAO;IACPC;EACM,CAAC;EACP,MAAMC,KAAK,GAAGR,QAAQ,EAAE;EACxB,oBACC,oBAAC,IAAI;IAAC,KAAK,EAAE,CAACS,MAAM,CAACC,GAAG,EAAEH,KAAK;EAAE,GAC/BH,OAAO,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;IACzB,MAAMC,kBAAkB,GAAGf,+BAA+B,CAAC;MAC1DS,KAAK;MACLJ,OAAO;MACPW,KAAK,EAAEF;IACR,CAAC,CAAC;IACF,MAAMG,OAAO,GACZH,CAAC,KAAK,CAAC,GACJ,OAAO,GACPA,CAAC,KAAKT,OAAO,CAACa,MAAM,GAAG,CAAC,GACxB,MAAM,GACNC,SAAS;IAEb,MAAMC,OAAO,GACZd,WAAW,IAAIe,KAAK,CAACC,OAAO,CAACnB,KAAK,CAAC,GAChCA,KAAK,CAACoB,QAAQ,CAACV,IAAI,CAACV,KAAK,CAAC,GAC1BA,KAAK,KAAKU,IAAI,CAACV,KAAK;IAExB,MAAMqB,OAAO,GAAIC,CAAwB,IAAK;MAAA;MAC7C,iBAAAZ,IAAI,CAACW,OAAO,kDAAZ,mBAAAX,IAAI,EAAWY,CAAC,CAAC;MAEjB,MAAMC,SAAS,GACdpB,WAAW,IAAIe,KAAK,CAACC,OAAO,CAACnB,KAAK,CAAC,GAChCiB,OAAO,GACNjB,KAAK,CAACwB,MAAM,CAAEC,GAAG,IAAKf,IAAI,CAACV,KAAK,KAAKyB,GAAG,CAAC,GACzC,CAAC,GAAGzB,KAAK,EAAEU,IAAI,CAACV,KAAK,CAAC,GACvBU,IAAI,CAACV,KAAK;;MAEd;MACAC,aAAa,CAACsB,SAAS,CAAC;IACzB,CAAC;IAED,oBACC,oBAAC,mBAAmB,eACfb,IAAI;MACR,GAAG,EAAEC,CAAE;MACP,OAAO,EAAEM,OAAQ;MACjB,OAAO,EAAEH,OAAQ;MACjB,OAAO,EAAEV,OAAQ;MACjB,OAAO,EAAEiB,OAAQ;MACjB,KAAK,EAAE,CAACX,IAAI,CAACL,KAAK,EAAEO,kBAAkB;IAAE,GACvC;EAEJ,CAAC,CAAC,CACI;AAET,CAAC;AAED,MAAML,MAAM,GAAGb,UAAU,CAACgC,MAAM,CAAC;EAChClB,GAAG,EAAE;IACJmB,aAAa,EAAE;EAChB;AACD,CAAC,CAAC;AAEF,eAAe5B,gBAAgB;;AAE/B;AACA,SAASA,gBAAoC"}