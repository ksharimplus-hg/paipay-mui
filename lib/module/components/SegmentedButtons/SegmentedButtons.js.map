{"version":3,"names":["React","StyleSheet","View","SegmentedButtonItem","getDisabledSegmentedButtonStyle","useTheme","SegmentedButtons","value","onValueChange","buttons","multiSelect","density","style","theme","styles","row","map","item","i","disabledChildStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","nextValue","filter","val","create","flexDirection"],"sources":["SegmentedButtons.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n\tGestureResponderEvent,\r\n\tStyleProp,\r\n\tStyleSheet,\r\n\tView,\r\n\tViewStyle,\r\n} from 'react-native';\r\n\r\nimport SegmentedButtonItem from './SegmentedButtonItem';\r\nimport { getDisabledSegmentedButtonStyle } from './utils';\r\nimport { useTheme } from '../../core/theming';\r\nimport type { IconSource } from '../Icon';\r\n\r\ntype ConditionalValue =\r\n\t| {\r\n\t\t\t/**\r\n\t\t\t * Array of the currently selected segmented button values.\r\n\t\t\t */\r\n\t\t\tvalue: string[];\r\n\t\t\t/**\r\n\t\t\t * Support multiple selected options.\r\n\t\t\t */\r\n\t\t\tmultiSelect: true;\r\n\t\t\t/**\r\n\t\t\t * Function to execute on selection change\r\n\t\t\t */\r\n\t\t\tonValueChange: (value: string[]) => void;\r\n\t  }\r\n\t| {\r\n\t\t\t/**\r\n\t\t\t * Value of the currently selected segmented button.\r\n\t\t\t */\r\n\t\t\tvalue: string;\r\n\t\t\t/**\r\n\t\t\t * Support multiple selected options.\r\n\t\t\t */\r\n\t\t\tmultiSelect?: false;\r\n\t\t\t/**\r\n\t\t\t * Function to execute on selection change\r\n\t\t\t */\r\n\t\t\tonValueChange: (value: string) => void;\r\n\t  };\r\n\r\nexport type Props = {\r\n\t/**\r\n\t * Buttons to display as options in toggle button.\r\n\t * Button should contain the following properties:\r\n\t * - `value`: value of button (required)\r\n\t * - `icon`: icon to display for the item\r\n\t * - `disabled`: whether the button is disabled\r\n\t * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\r\n\t * - `onPress`: callback that is called when button is pressed\r\n\t * - `label`: label text of the button\r\n\t * - `showSelectedCheck`: show optional check icon to indicate selected state\r\n\t * - `style`: pass additional styles for the button\r\n\t * - `testID`: testID to be used on tests\r\n\t */\r\n\tbuttons: {\r\n\t\tvalue: string;\r\n\t\ticon?: IconSource;\r\n\t\tdisabled?: boolean;\r\n\t\taccessibilityLabel?: string;\r\n\t\tonPress?: (event: GestureResponderEvent) => void;\r\n\t\tlabel?: string;\r\n\t\tshowSelectedCheck?: boolean;\r\n\t\tstyle?: StyleProp<ViewStyle>;\r\n\t\ttestID?: string;\r\n\t}[];\r\n\t/**\r\n\t * Density is applied to the height, to allow usage in denser UIs\r\n\t */\r\n\tdensity?: 'regular' | 'small' | 'medium' | 'high';\r\n\tstyle?: StyleProp<ViewStyle>;\r\n} & ConditionalValue;\r\n\r\n/**\r\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/segmented-button.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { SafeAreaView, StyleSheet } from 'react-native';\r\n * import { SegmentedButtons } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => {\r\n *   const [value, setValue] = React.useState('');\r\n *\r\n *   return (\r\n *     <SafeAreaView style={styles.container}>\r\n *       <SegmentedButtons\r\n *         value={value}\r\n *         onValueChange={setValue}\r\n *         buttons={[\r\n *           {\r\n *             value: 'walk',\r\n *             label: 'Walking',\r\n *           },\r\n *           {\r\n *             value: 'train',\r\n *             label: 'Transit',\r\n *           },\r\n *           { value: 'drive', label: 'Driving' },\r\n *         ]}\r\n *       />\r\n *     </SafeAreaView>\r\n *   );\r\n * };\r\n *\r\n * const styles = StyleSheet.create({\r\n *   container: {\r\n *     flex: 1,\r\n *     alignItems: 'center',\r\n *   },\r\n * });\r\n *\r\n * export default MyComponent;\r\n *```\r\n */\r\nconst SegmentedButtons = ({\r\n\tvalue,\r\n\tonValueChange,\r\n\tbuttons,\r\n\tmultiSelect,\r\n\tdensity,\r\n\tstyle,\r\n}: Props) => {\r\n\tconst theme = useTheme();\r\n\treturn (\r\n\t\t<View style={[styles.row, style]}>\r\n\t\t\t{buttons.map((item, i) => {\r\n\t\t\t\tconst disabledChildStyle = getDisabledSegmentedButtonStyle({\r\n\t\t\t\t\ttheme,\r\n\t\t\t\t\tbuttons,\r\n\t\t\t\t\tindex: i,\r\n\t\t\t\t});\r\n\t\t\t\tconst segment =\r\n\t\t\t\t\ti === 0\r\n\t\t\t\t\t\t? 'first'\r\n\t\t\t\t\t\t: i === buttons.length - 1\r\n\t\t\t\t\t\t? 'last'\r\n\t\t\t\t\t\t: undefined;\r\n\r\n\t\t\t\tconst checked =\r\n\t\t\t\t\tmultiSelect && Array.isArray(value)\r\n\t\t\t\t\t\t? value.includes(item.value)\r\n\t\t\t\t\t\t: value === item.value;\r\n\r\n\t\t\t\tconst onPress = (e: GestureResponderEvent) => {\r\n\t\t\t\t\titem.onPress?.(e);\r\n\r\n\t\t\t\t\tconst nextValue =\r\n\t\t\t\t\t\tmultiSelect && Array.isArray(value)\r\n\t\t\t\t\t\t\t? checked\r\n\t\t\t\t\t\t\t\t? value.filter((val) => item.value !== val)\r\n\t\t\t\t\t\t\t\t: [...value, item.value]\r\n\t\t\t\t\t\t\t: item.value;\r\n\r\n\t\t\t\t\t/* @ts-ignore */\r\n\t\t\t\t\tonValueChange(nextValue);\r\n\t\t\t\t};\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<SegmentedButtonItem\r\n\t\t\t\t\t\t{...item}\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tchecked={checked}\r\n\t\t\t\t\t\tsegment={segment}\r\n\t\t\t\t\t\tdensity={density}\r\n\t\t\t\t\t\tonPress={onPress}\r\n\t\t\t\t\t\tstyle={[item.style, disabledChildStyle]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\trow: {\r\n\t\tflexDirection: 'row',\r\n\t},\r\n});\r\n\r\nexport default SegmentedButtons;\r\n\r\n// @component-docs ignore-next-line\r\nexport { SegmentedButtons as SegmentedButtons };\r\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAGCC,UAAU,EACVC,IAAI,QAEE,cAAc;AAErB,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,+BAA+B,QAAQ,SAAS;AACzD,SAASC,QAAQ,QAAQ,oBAAoB;AAiE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,QAOZ;EAAA,IAPa;IACzBC,KAAK;IACLC,aAAa;IACbC,OAAO;IACPC,WAAW;IACXC,OAAO;IACPC;EACM,CAAC;EACP,MAAMC,KAAK,GAAGR,QAAQ,EAAE;EACxB,oBACC,oBAAC,IAAI;IAAC,KAAK,EAAE,CAACS,MAAM,CAACC,GAAG,EAAEH,KAAK;EAAE,GAC/BH,OAAO,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KAAK;IACzB,MAAMC,kBAAkB,GAAGf,+BAA+B,CAAC;MAC1DS,KAAK;MACLJ,OAAO;MACPW,KAAK,EAAEF;IACR,CAAC,CAAC;IACF,MAAMG,OAAO,GACZH,CAAC,KAAK,CAAC,GACJ,OAAO,GACPA,CAAC,KAAKT,OAAO,CAACa,MAAM,GAAG,CAAC,GACxB,MAAM,GACNC,SAAS;IAEb,MAAMC,OAAO,GACZd,WAAW,IAAIe,KAAK,CAACC,OAAO,CAACnB,KAAK,CAAC,GAChCA,KAAK,CAACoB,QAAQ,CAACV,IAAI,CAACV,KAAK,CAAC,GAC1BA,KAAK,KAAKU,IAAI,CAACV,KAAK;IAExB,MAAMqB,OAAO,GAAIC,CAAwB,IAAK;MAAA;MAC7C,iBAAAZ,IAAI,CAACW,OAAO,kDAAZ,mBAAAX,IAAI,EAAWY,CAAC,CAAC;MAEjB,MAAMC,SAAS,GACdpB,WAAW,IAAIe,KAAK,CAACC,OAAO,CAACnB,KAAK,CAAC,GAChCiB,OAAO,GACNjB,KAAK,CAACwB,MAAM,CAAEC,GAAG,IAAKf,IAAI,CAACV,KAAK,KAAKyB,GAAG,CAAC,GACzC,CAAC,GAAGzB,KAAK,EAAEU,IAAI,CAACV,KAAK,CAAC,GACvBU,IAAI,CAACV,KAAK;;MAEd;MACAC,aAAa,CAACsB,SAAS,CAAC;IACzB,CAAC;IAED,oBACC,oBAAC,mBAAmB,eACfb,IAAI;MACR,GAAG,EAAEC,CAAE;MACP,OAAO,EAAEM,OAAQ;MACjB,OAAO,EAAEH,OAAQ;MACjB,OAAO,EAAEV,OAAQ;MACjB,OAAO,EAAEiB,OAAQ;MACjB,KAAK,EAAE,CAACX,IAAI,CAACL,KAAK,EAAEO,kBAAkB;IAAE,GACvC;EAEJ,CAAC,CAAC,CACI;AAET,CAAC;AAED,MAAML,MAAM,GAAGb,UAAU,CAACgC,MAAM,CAAC;EAChClB,GAAG,EAAE;IACJmB,aAAa,EAAE;EAChB;AACD,CAAC,CAAC;AAEF,eAAe5B,gBAAgB;;AAE/B;AACA,SAASA,gBAAoC"}